/*
 * Container - En flexibel layoutkomponent med responsivt beteende
 */
export const Container = ({ children, className = "" }) => {
  return <div className={`max-w-7xl mx-auto p-4 ${className}`}>{children}</div>;
};

/*
 * Button - En knappkomponent med stöd för olika varianter
 */
export const Button = ({ variant = "primary", children, ...props }) => {
  const baseStyles = "px-4 py-2 rounded text-white font-bold";
  const variants = {
    primary: "bg-blue-500 hover:bg-blue-600",
    secondary: "bg-gray-500 hover:bg-gray-600",
    success: "bg-green-500 hover:bg-green-600",
    warning: "bg-yellow-500 hover:bg-yellow-600",
  };
  return (
    <button className={`${baseStyles} ${variants[variant]}`} {...props}>
      {children}
    </button>
  );
};

/*
 * DataTable - En tabellkomponent med stöd för sortering och filtrering
 */
export const DataTable = ({ columns, data }) => {
  return (
    <table className="w-full border-collapse border border-gray-300">
      <thead>
        <tr className="bg-gray-100">
          {columns.map((col) => (
            <th key={col.key} className="border p-2 text-left">
              {col.label}
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {data.map((row, index) => (
          <tr key={index} className="border">
            {columns.map((col) => (
              <td key={col.key} className="border p-2">
                {row[col.key]}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
};

/*
 * SearchBar - En sökfältkomponent med hantering av inmatning
 */
export const SearchBar = ({ onSearch }) => {
  return (
    <input
      type="text"
      placeholder="Sök..."
      className="border p-2 rounded w-full"
      onChange={(e) => onSearch(e.target.value)}
    />
  );
};

/*
 * ErrorBoundary - Fångar fel i komponenter och visar ett fallback-meddelande
 */
import { Component } from "react";
export class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  componentDidCatch(error, info) {
    console.error("ErrorBoundary caught an error", error, info);
  }
  render() {
    if (this.state.hasError) {
      return <h2>Oops! Något gick fel.</h2>;
    }
    return this.props.children;
  }
}

/*
 * LazyLoadWrapper - En wrapper-komponent för lazy loading av andra komponenter
 */
import { Suspense } from "react";
export const LazyLoadWrapper = ({ children }) => {
  return <Suspense fallback={<div>Laddar...</div>}>{children}</Suspense>;
};


/* 
 * Sidebar/Navigation - En sidomeny för navigering mellan olika sidor
 */
export const Sidebar = ({ items }) => {
    return (
      <div className="w-64 bg-gray-800 text-white p-4">
        <ul>
          {items.map((item, index) => (
            <li key={index} className="mb-2">
              <a href={item.href} className="hover:text-blue-400">
                {item.label}
              </a>
            </li>
          ))}
        </ul>
      </div>
    );
  };
  
  /* 
   * Tabs/Accordion - För att skapa flikar eller kollapsbara sektioner
   */
  import { useState } from "react";
  export const Tabs = ({ tabs }) => {
    const [activeTab, setActiveTab] = useState(tabs[0].label);
    return (
      <div>
        <div className="flex space-x-4">
          {tabs.map((tab) => (
            <button
              key={tab.label}
              className={`p-2 ${activeTab === tab.label ? "bg-blue-500" : "bg-gray-200"}`}
              onClick={() => setActiveTab(tab.label)}
            >
              {tab.label}
            </button>
          ))}
        </div>
        <div className="mt-4">
          {tabs.map((tab) => (
            tab.label === activeTab && <div key={tab.label}>{tab.content}</div>
          ))}
        </div>
      </div>
    );
  };
  
  /* 
   * Modal/Dialog - En popup-komponent för meddelanden eller formulär
   */
  export const Modal = ({ isOpen, onClose, children }) => {
    if (!isOpen) return null;
    return (
      <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex justify-center items-center">
        <div className="bg-white p-6 rounded shadow-lg">
          <button onClick={onClose} className="absolute top-2 right-2 text-xl">&times;</button>
          {children}
        </div>
      </div>
    );
  };
  
  /* 
   * Notification/Toast - En notifieringskomponent för att visa meddelanden
   */
  export const Toast = ({ message, type = "success", onClose }) => {
    const types = {
      success: "bg-green-500",
      error: "bg-red-500",
      info: "bg-blue-500",
    };
    return (
      <div className={`fixed bottom-4 left-4 p-4 rounded ${types[type]} text-white`}>
        <div className="flex justify-between">
          <span>{message}</span>
          <button onClick={onClose} className="ml-4">&times;</button>
        </div>
      </div>
    );
  };
  
  /* 
   * LoadingSpinner - En snurrande indikator som kan användas under laddning
   */
  export const LoadingSpinner = () => {
    return <div className="animate-spin rounded-full h-8 w-8 border-t-4 border-blue-500"></div>;
  };
  
  /* 
   * Pagination - En komponent för att hantera sidindelning
   */
  export const Pagination = ({ currentPage, totalPages, onPageChange }) => {
    const pages = [];
    for (let i = 1; i <= totalPages; i++) {
      pages.push(i);
    }
    return (
      <div className="flex space-x-2">
        {pages.map((page) => (
          <button
            key={page}
            className={`px-4 py-2 rounded ${currentPage === page ? "bg-blue-500 text-white" : "bg-gray-300"}`}
            onClick={() => onPageChange(page)}
          >
            {page}
          </button>
        ))}
      </div>
    );
  };
  
  /* 
   * SkeletonLoader - En placeholder-komponent för att visa när data laddas
   */
  export const SkeletonLoader = () => {
    return (
      <div className="animate-pulse bg-gray-200 rounded w-full h-12 mb-4"></div>
    );
  };
  
  /* 
   * withAuthentication - HOC för att skydda sidor som kräver autentisering
   */
  export const withAuthentication = (Component) => {
    return (props) => {
      const isAuthenticated = true; // Lägg till logik för autentisering här
      if (!isAuthenticated) {
        return <div>Du måste vara inloggad för att se denna sida.</div>;
      }
      return <Component {...props} />;
    };
  };
  
  /* 
   * withTheme - HOC för att hantera mörkt/ljust tema
   */
  import { useState, useEffect } from "react";
  export const withTheme = (Component) => {
    return (props) => {
      const [theme, setTheme] = useState("light");
      useEffect(() => {
        const storedTheme = localStorage.getItem("theme");
        if (storedTheme) {
          setTheme(storedTheme);
        }
      }, []);
      const toggleTheme = () => {
        const newTheme = theme === "light" ? "dark" : "light";
        setTheme(newTheme);
        localStorage.setItem("theme", newTheme);
      };
      return (
        <div className={theme}>
          <button onClick={toggleTheme}>Byt Tema</button>
          <Component {...props} />
        </div>
      );
    };
  };
  